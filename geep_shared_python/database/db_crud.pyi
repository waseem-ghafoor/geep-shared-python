"""
This type stub file was generated by pyright.
"""

from typing import Any, Callable, Generator, Generic, List, Optional, Type, TypeVar
from sqlalchemy.orm import DeclarativeBase, Session

"""
This module serves as Data Access Layer handling CRUD operations on databases
- Base class for Data Access Layer
- Concrete implementations for SQLAlchemy Core
"""

class Base(DeclarativeBase):
    __abstract__ = ...
    type_annotation_map = ...
    created_at = ...
    updated_at = ...

T = TypeVar("T", bound=Base)

class DatabaseRepository(Generic[T]):
    """
    A generic class for performing CRUD operations on a database. This is typed
    using the repository pattern.

    Args:
        model (type[Base]): The SQLAlchemy model to perform CRUD operations on.
        session (Session): The SQLAlchemy session to use for database operations.
    """

    def __init__(self, model: Type[T], session: Session) -> None:
        self.model = model
        self.session = session

    def select(
        self,
        filter_conditions: Optional[dict[str, Any]] = ...,
        order_by: Optional[List[str]] = ...,
        descending: bool = ...,
    ) -> list[T]:
        """
        Selects records from the database

        Args:
            filter_conditions (dict): Filter conditions to apply to the select operation
            order_by (str, optional): Column to sort by. Defaults to None.
            descending (bool, optional): Whether to sort in descending order. Defaults to False.

        Returns:
            Any: The selected records.
        """
        ...

    def select_one(
        self,
        filter_conditions: Optional[dict[str, Any]] = ...,
        less_than: Optional[bool] = ...,
        greater_than: Optional[bool] = ...,
        lt_gt_columns: Optional[List[str]] = ...,
    ) -> T:
        """
        Selects a single record from the database

        Args:
            filter_conditions (dict): Filter conditions to apply to the select operation
            order_by (str, optional): Column to sort by. Defaults to None.
            less_than (bool, optional): Whether to select using < a value. Defaults to False.
            greater_than (bool, optional): Whether to select using a value>. Defaults to False.
            lt_gt_columns (List[str], optional): Columns to apply < or > to. Defaults to None.
                                                 Columns not named here use == operator.
        Returns:
            Any: The selected records.
        """
        ...

    def insert(self, data: dict[str, Any], do_commit: bool = ...) -> T:
        """
        Inserts new records into the database
        Args:
            model (tye[Base]): SQLAlchemy model used in select operation
            data (dict): The data for the new record
            do_commit (bool, optional): Whether to commit the transaction. Defaults to True.
            Used when multiple inserts must be atomic.
        Returns:
            Any: The inserted record.
        """
        ...

    def update(self, filter_conditions: dict[str, Any], data: dict[Any, Any]) -> int:
        """
        Updates records in the database.

        Args:
            model (type[Base]): The SQLAlchemy model to update.
            filter_conditions (dict): The conditions to filter the records by.
            data (dict): The new data for the records.

        Returns:
            int: The number of records updated.
        """
        ...

    def upsert(self, data: dict[str, Any]) -> T:
        """
        Inserts a new record into the database or updates an existing one based on unique constraints.
        Args:
            data (dict): The data for the new or existing record.
        Returns:
            T: The inserted or updated record.
        """
        ...

    def delete(self, filter_conditions: dict[str, Any]) -> int:
        """
        Deletes records from the database. USE WITH CARE! As a rule we should not be deleting data.

        Args:
            filter_conditions (dict): The conditions to filter the records by.

        Returns:
            int: The number of records deleted.
        """
        ...

def get_db_session() -> Generator[Session, None, None]:
    """Creates a new SQLAlchemy SessionLocal instance and closes after request is finished
    Yields:
        Session: SQLAlchemy SessionLocal instance
    """
    ...

def get_repository(model: Type[Base]) -> Callable[[Session], DatabaseRepository[Base]]:
    """Provides Repository instance with the database session
    Args:
        db (Session, optional): SQLAlchemy Session instance. Defaults to Depends(get_db_session).

    Returns:
        DatabaseRespository: A database repository of type Model
    """
    ...
