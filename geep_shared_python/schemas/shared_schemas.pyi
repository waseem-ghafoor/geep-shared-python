"""
This type stub file was generated by pyright.
"""

from datetime import date, datetime
from enum import Enum
from typing import ClassVar, Literal, Optional

from pydantic import BaseModel, ConfigDict
from pydantic_settings import BaseSettings

"""
This type stub file was generated by pyright.
"""

class UserType(Enum):
    _value_: str
    REAL = ...
    TEST = ...
    SIM = ...

class DialogueType(Enum):
    _value_: str
    REAL = ...
    TEST = ...
    SIM = ...

class A11yType(Enum):
    _value_: str
    SUBTITLE = ...
    TRANSCRIPT = ...

class SpeakerType(Enum):
    _value_: str
    USER = ...
    BOT = ...

class AsrType(Enum):
    _value_: str
    ASSEMBLYAI = ...
    DEEPGRAM = ...

class TaskStatusType(str, Enum):
    live = ...
    test = ...

class HealthCheck(BaseModel):
    status: str = ...

class SharedSettings(BaseSettings):
    aws_region: str = ...
    db_user: str = ...
    db_password: str = ...
    db_host: str = ...
    db_name: str = ...
    db_port: str = ...
    environment: str = ...
    log_level: str = ...
    log_use_colors: bool = ...
    enable_metrics: bool = ...
    dialogue_service_host: str = ...
    dialogue_service_port: int = ...
    llm_service_host: str = ...
    llm_service_port: int = ...
    task_service_host: str = ...
    task_service_port: int = ...
    prompt_service_host: str = ...
    prompt_service_port: int = ...

class UserTokenClaimsSchema(BaseModel):
    exp: datetime = ...
    eol_id: int = ...
    country: str
    referringTheme: str = ...
    l2_language_level: str = ...
    date_of_birth: date = ...
    iss: str

class LlmV1StructuredChatResultSchema(BaseModel):
    response: str
    end_conversation: bool
    persona: Optional[Literal[1, 2]] = ...
    model_config: ClassVar[ConfigDict] = ...
